{
  "concatenatedContent": "\n/**\r\n * Represents metadata used in the ArrayComponent.\r\n */\r\ninterface ArrayMetadata {\r\n  /**\r\n   * The orientation of the array component, e.g., \"v\" for vertical, or \"\" for horizontal.\r\n   */\r\n  orientation?: \"v\" | \"\";\r\n\r\n  /**\r\n   * Whether the component should animate.\r\n   */\r\n  anim?: boolean;\r\n}\r\n\r\n/**\r\n * Represents an object with methods for managing an array's data and history.\r\n */\r\ninterface ArrayObject {\r\n  /**\r\n   * Sets the group data in the group history.\r\n   *\r\n   * @param data - An array of numbers representing the group data to be set.\r\n   * @param synchronize - Optional flag to trigger synchronization after setting the group data. Defaults to `true`.\r\n   */\r\n  group(data: number[], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the index data in the index history.\r\n   *\r\n   * @param data - A number representing the index to be set.\r\n   * @param synchronize - Optional flag to trigger synchronization after setting the index data. Defaults to `true`.\r\n   */\r\n  setIndex(data: number, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the array data in the array history.\r\n   *\r\n   * @param data - An array of strings representing the array content to be set.\r\n   * @param synchronize - Optional flag to trigger synchronization after setting the array data. Defaults to `true`.\r\n   */\r\n  setArr(data: string[], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the frame data in the histories.\r\n   *\r\n   * The `data` parameter can include:\r\n   * - `index`: The index to set in the index history.\r\n   * - `group`: The group to set in the group history.\r\n   * - `content`: The content to set in the array history.\r\n   *\r\n   * Each field is optional. If a field is provided, it will update the respective history.\r\n   *\r\n   * @param data - An object containing the fields to update:\r\n   *   - `index` (optional): A number representing the index to set.\r\n   *   - `group` (optional): An array of numbers representing the group to set.\r\n   *   - `content` (optional): An array of strings representing the content to set.\r\n   * @param synchronize - Optional flag to trigger synchronization after setting the frame data. Defaults to `true`.\r\n   */\r\n  frame(data: { index?: number; group?: number[]; content?: string[] }, synchronize?: boolean): void;\r\n}\r\n\r\n/**\r\n * Represents the possible orientation settings for an array component.\r\n * - `\"v\"`: Vertical orientation.\r\n * - `\"\"`: Horizontal or default orientation.\r\n */\r\ntype Orientation = \"v\" | \"\";\r\n\r\n/**\r\n * Represents the settings for creating an array component.\r\n */\r\ninterface ArraySettings {\r\n  orientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Creates a new ArrayObject with the specified settings.\r\n *\r\n * @param settings - An object containing the optional `orientation` setting.\r\n * @returns A new ArrayObject instance.\r\n */\r\ndeclare const createArray: (settings: ArraySettings) => ArrayObject;\r\n\n/**\r\n * Represents a label object.\r\n */\r\ninterface LabelObject {\r\n  /**\r\n   * Sets the contents of the label.\r\n   *\r\n   * @param text - The content to set for the label.\r\n   */\r\n  text(text: string): void;\r\n}\r\n\r\n/**\r\n * Represents the settings used to configure a label.\r\n */\r\ninterface LabelSettings {\r\n  /**\r\n   * The prefix to prepend to the label's content.\r\n   */\r\n  prefix: string;\r\n\r\n  /**\r\n   * The suffix to append to the label's content.\r\n   */\r\n  suffix: string;\r\n}\r\n\r\n/**\r\n * Creates a new LabelObject with the specified settings.\r\n *\r\n * @param settings - An object containing the `prefix` and `suffix` for the label.\r\n * @returns A new LabelObject instance.\r\n */\r\ndeclare const createLabel: (settings: LabelSettings) => LabelObject;\r\n\n/**\r\n * Represents the colors used in a matrix.\r\n * Maps numerical keys to color values.\r\n */\r\ndeclare interface MatrixColor {\r\n  [key: number]: string; // Maps numerical indices to color strings.\r\n}\r\n\r\n/**\r\n * Represents a position in a 2D space.\r\n * A tuple containing X and Y coordinates.\r\n */\r\ndeclare type Position = [number, number];\r\n\r\n/**\r\n * Represents a matrix object with various methods to manipulate the matrix content, colors, and groups.\r\n */\r\ndeclare interface MatrixObject {\r\n  /**\r\n   * Replaces a value at the specified position in the matrix.\r\n   *\r\n   * @param position The coordinates in the matrix where the replacement occurs.\r\n   * @param value The new value to set at the specified position.\r\n   * @param synchronize Optional flag to trigger synchronization after replacement.\r\n   */\r\n  replace(position: Position, value: string, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the content of the matrix.\r\n   *\r\n   * @param data A 2D array of strings representing the matrix content.\r\n   * @param synchronize Optional flag to trigger synchronization after setting content.\r\n   */\r\n  content(data: string[][], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the colors for the matrix.\r\n   *\r\n   * @param colors An object mapping matrix indices to color values.\r\n   *\r\n   * Example:\r\n   * ```ts\r\n   * { 0: \"white\", 1: \"#fff\", 2: \"bg-white\" }\r\n   * ```\r\n   * @param synchronize Optional flag to trigger synchronization after setting colors.\r\n   */\r\n  colors(colors: MatrixColor, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the grouping for the matrix.\r\n   *\r\n   * @param data An array of tuples representing the coordinates of grouped elements.\r\n   * @param synchronize Optional flag to trigger synchronization after setting groups.\r\n   */\r\n  group(data: Array<Position>, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the frame data in the matrix object.\r\n   *\r\n   * The `data` parameter can include:\r\n   * - `content`: A 2D array of strings representing the matrix content.\r\n   * - `colors`: An object mapping indices to color values for the matrix.\r\n   * - `group`: An array of positions representing the grouping in the matrix.\r\n   *\r\n   * Each field is optional. If a field is provided, it will update the respective aspect of the matrix. If not, the existing data for that field will remain unchanged.\r\n   *\r\n   * @param data - An object containing the fields to update:\r\n   *   - `content` (optional): A 2D array of strings representing the matrix content. Example: `[['A', 'B'], ['C', 'D']]`\r\n   *   - `colors` (optional): An object mapping numerical indices to color values. Example: `{0: 'red', 1: 'blue'}`.\r\n   *   - `group` (optional): An array of positions representing the grouping of elements. Each position is a tuple with X and Y coordinates. Example: `[[0, 0], [1, 1]]`.\r\n   * @param synchronize - Optional flag to trigger synchronization after setting the frame data. Defaults to `true`.\r\n   */\r\n  frame(data: { content?: string[][]; colors?: MatrixColor; group?: Position[] }, synchronize?: boolean): void;\r\n}\r\n\r\n/**\r\n * Creates a new MatrixObject instance with methods for manipulating the matrix.\r\n *\r\n * @returns A new MatrixObject instance.\r\n */\r\ndeclare const createMatrix: () => MatrixObject;\r\n\n/**\r\n * Represents a stack object with typical stack operations like push and pop.\r\n */\r\ndeclare interface StackObject {\r\n  /**\r\n   * Pushes a new value onto the stack.\r\n   *\r\n   * @param value The value to be added to the top of the stack.\r\n   *\r\n   * Example usage:\r\n   * ```ts\r\n   * stack.push(\"value\");\r\n   * ```\r\n   */\r\n  push(value: string | number): void;\r\n\r\n  /**\r\n   * Pops the top value from the stack.\r\n   *\r\n   * Example usage:\r\n   * ```ts\r\n   * const topValue = stack.pop();\r\n   * ```\r\n   */\r\n  pop(): void;\r\n}\r\n\r\n/**\r\n * Creates a new stack object.\r\n *\r\n * @returns A new StackObject instance.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * const stack = createStack();\r\n * stack.push(\"value\");\r\n * ```\r\n */\r\ndeclare const createStack: () => StackObject;\r\n\ntype NodeAsArray = [string, [[key: string | TreeNode | NodeAsArray]]];\r\n\r\n/**\r\n * Represents a node in the tree.\r\n */\r\ndeclare class TreeNode {\r\n  /**\r\n   * The data contained in the node.\r\n   */\r\n  label: string;\r\n\r\n  /**\r\n   * Is the node highligted\r\n   */\r\n  active: boolean;\r\n\r\n  /**\r\n   * Should make path from parent to node blue\r\n   */\r\n  showPathFromParent: boolean;\r\n\r\n  /**\r\n   * The children of this node.\r\n   */\r\n  children: TreeNode[];\r\n\r\n  /**\r\n   * Adds a new child node with the specified data.\r\n   *\r\n   * @param data The data to be added to the new child node.\r\n   */\r\n  add(data: TreeNode | NodeAsArray): void;\r\n\r\n  /**\r\n   * Sets highligting for a node\r\n   *\r\n   * @param val highlight or not to highlight it is a question\r\n   * @param showPathFromParent if not specyfied it takes the value of **val**\r\n   */\r\n  setHighlighting(val: boolean, showPathFromParent?: boolean): void;\r\n\r\n  /**\r\n   * Reculsivly sets **showPathFromParent** to false for all children\r\n   */\r\n  resetPaths();\r\n\r\n  /**\r\n   * Reculsivly sets **active** to false for all children\r\n   */\r\n  resetHighlights();\r\n\r\n  /**\r\n   * Reculsivly calc **setHighlighting(false)** for all children\r\n   */\r\n  resetAll();\r\n\r\n  /**\r\n   * Removes a child node containing the specified data.\r\n   *\r\n   * @param data The data of the node to remove.\r\n   */\r\n  remove(data: any): void;\r\n}\r\n\r\n/**\r\n * Represents the tree\r\n */\r\ndeclare interface TreeObject {\r\n  /**\r\n   * Sets the content of the tree.\r\n   *\r\n   * @param data The tree data\r\n   * @param synchronize Optional flag to trigger synchronization after setting content.\r\n   */\r\n  content(data: TreeNode, synchronize?: boolean): void;\r\n}\r\n\r\n/**\r\n * Creates a new TreeObject instance with methods for manipulating the tree structure.\r\n *\r\n * @returns A new TreeObject instance.\r\n */\r\ndeclare const createTree: () => TreeObject;\r\n\r\n/**\r\n * Represents metadata for the TreeComponent.\r\n */\r\ndeclare interface TreeMetadata {}\r\n"
}