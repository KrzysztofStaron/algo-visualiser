{
  "concatenatedContent": "\n/**\r\n * Represents metadata used in ArrayComponent\r\n */\r\ninterface ArrayMetadata {\r\n  /**\r\n   * The orientation of the array component, e.g., \"v\" for vertical\r\n   */\r\n  orientation?: string;\r\n\r\n  /**\r\n   * Whether the component should animate\r\n   */\r\n  anim?: boolean;\r\n}\r\n\r\n/**\r\n * Represents the data used in the frame method\r\n */\r\ninterface ArrayFrameData {\r\n  /**\r\n   * The index to set in the array history\r\n   */\r\n  index?: number;\r\n\r\n  /**\r\n   * The group to set in the group history\r\n   */\r\n  group?: number[];\r\n\r\n  /**\r\n   * The content to set in the array history\r\n   */\r\n  content?: any[];\r\n}\r\n\r\n/**\r\n * Creates a handler for array operations.\r\n * @param root The root object for registering the handler\r\n * @param metadata Metadata for configuring the handler\r\n * @returns An object with methods to interact with array history\r\n */\r\nexport function createArray(metadata: ArrayMetadata): {\r\n  /**\r\n   * Sets the group data in the group history\r\n   * @param data The group data to set\r\n   * @param synchronize Whether to synchronize the data\r\n   */\r\n  group(data: number[], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the index data in the index history\r\n   * @param data The index data to set\r\n   * @param synchronize Whether to synchronize the data\r\n   */\r\n  setIndex(data: number, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the array data in the array history\r\n   * @param data The array data to set\r\n   * @param synchronize Whether to synchronize the data\r\n   */\r\n  setArr(data: string[], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the frame data in the histories\r\n   * @param data The frame data to set\r\n   * @param synchronize Whether to synchronize the data\r\n   */\r\n  frame(data: ArrayFrameData, synchronize?: boolean): void;\r\n};\r\n\n/**\r\n * Represents a label object\r\n */\r\ninterface LabelObject {\r\n  /**\r\n   * Sets the contents of label\r\n   * @param text The contents of label\r\n   */\r\n  text(text: string): void;\r\n}\r\n\r\ninterface LabelSettings {\r\n  prefix: string;\r\n  suffix: string;\r\n}\r\n\r\n/**\r\n * @returns A new LabelObject instance.\r\n */\r\ndeclare const createLabel: (settings: LabelSettings) => LabelObject;\r\n\n/**\r\n * Represents the colors used in a matrix.\r\n * Maps keys to color values.\r\n */\r\ndeclare interface MatrixColor {\r\n  [key: number]: string; // Maps numerical indices to color strings\r\n}\r\n\r\n/**\r\n * Represents a position in a 2D space.\r\n * Tuple with X and Y coordinates.\r\n */\r\ndeclare type Position = [number, number];\r\n\r\n/**\r\n * Represents a matrix object with various methods.\r\n */\r\ndeclare interface MatrixObject {\r\n  /**\r\n   * Replaces a value at the given position in the matrix.\r\n   * @param position The position where the replacement occurs.\r\n   * @param value The new value to set.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  replace(position: Position, value: string, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the content of the matrix.\r\n   * @param data 2D array of strings to set as the matrix content.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  content(data: string[][], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the colors for the matrix.\r\n   * @param colors An object mapping indices to color values.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  colors(colors: MatrixColor, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the grouping for the matrix.\r\n   * @param data An array of tuples representing groups.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  group(data: Array<[number, number]>, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the frame of the matrix.\r\n   * @param data An object containing content, colors, and group information.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  frame(data: { content?: string[][]; colors?: MatrixColor; group?: Position[] }, synchronize?: boolean): void;\r\n}\r\n\r\n/**\r\n * Creates a new matrix object.\r\n * @returns A new MatrixObject instance.\r\n */\r\ndeclare const createMatrix: () => MatrixObject;\r\n"
}