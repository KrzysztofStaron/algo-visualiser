{
  "concatenatedContent": "\n/**\r\n * Represents the colors used in a matrix.\r\n * Maps numerical keys to color values.\r\n */\r\ndeclare interface MatrixColor {\r\n  [key: number]: string; // Maps numerical indices to color strings\r\n}\r\n\r\n/**\r\n * Represents a position in a 2D space.\r\n * Tuple with X and Y coordinates.\r\n */\r\ndeclare type Position = [number, number];\r\n\r\n/**\r\n * Represents a matrix object with various methods.\r\n */\r\ndeclare interface MatrixObject {\r\n  /**\r\n   * Replaces a value at the given position in the matrix.\r\n   * @param position The position where the replacement occurs.\r\n   * @param value The new value to set.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  replace(position: Position, value: string, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the content of the matrix.\r\n   * @param data 2D array of strings to set as the matrix content.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  content(data: string[][], synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the colors for the matrix.\r\n   * @param data An object mapping indices to color values.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  colors(data: MatrixColor, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the grouping for the matrix.\r\n   * @param data An array of tuples representing groups.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  group(data: Array<[number, number]>, synchronize?: boolean): void;\r\n\r\n  /**\r\n   * Sets the frame of the matrix.\r\n   * @param data An object containing content, colors, and group information.\r\n   * @param synchronize Optional flag to indicate if synchronization is needed.\r\n   */\r\n  frame(data: { content?: any[][]; colors?: MatrixColor; group?: Position[] }, synchronize?: boolean): void;\r\n}\r\n\r\n/**\r\n * Creates a new matrix object.\r\n * @returns A new MatrixObject instance.\r\n */\r\ndeclare const createMatrix: () => MatrixObject;\r\n"
}